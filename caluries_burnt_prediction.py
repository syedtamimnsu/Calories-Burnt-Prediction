# -*- coding: utf-8 -*-
"""Caluries Burnt Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zgH4ACHK_TsprVxk3CRACaxMUlKFxeEZ

Importing Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""Data Collection and Processing

"""

#loading the data from csv file to a pandas data frame
calories = pd.read_csv('/content/calories.csv')

calories.head()

exercise_data = pd.read_csv('/content/exercise.csv')

exercise_data.head()

"""Combine calories and exercise data set together"""

#user id not need to combine, because it already exist in exercise data set
calories_data = pd.concat([exercise_data, calories['Calories']],axis=1)

calories_data.head()

calories_data.shape

#information about dataset
calories_data.info()

#check null values
calories_data.isnull().sum()

#statistical measures about the dataset
calories_data.describe()

"""Data visualization"""

#plotting the gender column in count plot
sns.countplot(calories_data['Gender'])

#finding distribuation of age column
sns.distplot(calories_data['Age'])

#finding distribuation of Height column
sns.distplot(calories_data['Height'])

#finding distribuation of weight column
sns.distplot(calories_data['Weight'])

"""Convert the catagorical data to neumarical data"""

calories_data.replace({"Gender":{'male':0, 'female':1}}, inplace=True)

calories_data.head()

"""Finding correlation of the dataset

"""

correlation = calories_data.corr()

#construction a heatmap of correlation matrix
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

"""Separating features and target"""

x = calories_data.drop(columns=['User_ID','Calories'], axis=1)
y = calories_data['Calories']

print(x)

print(y)

"""Splitting data into train and test"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=5)

print(x.shape, x_train.shape, x_test.shape)

"""Model training

XGBoost Regressor
"""

#loading the model
model = XGBRegressor()

#training the model with x_train
model.fit(x_train, y_train)

"""Evalluation

Prediction on test data
"""

test_data_prediction = model.predict(x_test)

print(test_data_prediction)

"""Mean Absolute Error"""

mae = metrics.mean_absolute_error(y_test, test_data_prediction)

print("Mean Absolute Error: ", mae)

